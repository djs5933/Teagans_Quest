<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_abstract_menu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setting up variables
menu_name = "character status";
selected_character = "";
event_inherited();          //get the stuff from the parent

known_spells = "";
for (j = 0;   j &lt; ds_list_size(global.party[|selected_character].magic_list); j++)
{
    temp_player = global.party[|selected_character];
    temp_magic_list = temp_player.magic_list;
    temp_spell = temp_magic_list[|j];
    temp_instance= instance_create(x, y, temp_spell);
    temp_name = temp_spell.name;
    //known_spells = known_spells + global.party[|selected_character].magic_list[|j].name + ", ";
    if(j == ds_list_size(global.party[|selected_character].magic_list) -1)
    {
        known_spells = known_spells + temp_name;
    }
    else
    {
        known_spells = known_spells + temp_name + ", ";
    }
    
    with(temp_instance)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!isComplete)
{
    
    
    
    backdrop = instance_create(x,y, obj_window_base);

    
    backdrop.depth = self.depth;            //depth correction
    backdrop.image_xscale = (view_wview[0]) / 64;       //64 since the window base object is 64 pixels wide
    backdrop.image_yscale = (view_hview[0]) /64;        //see above

    for(i = 0; i &lt; ds_list_size(menu_items); i++)
    {
//        ds_list_add(active_Items,instance_create(x+25, y+ 40 + 40* i, ds_list_find_value(menu_items, i)));
        
    }
    isComplete = true;
    
    
}

    

draw_sprite(global.party[|selected_character].current_portrait,1,x+20,y + 15 +(i*100)); //Draw Party Character Portraits
draw_set_color(c_white)
draw_set_font(fnt_menu);
draw_set_halign(fa_left)
//NAME AND LEVEL
draw_text(x+120, y + 20 +(i*100), global.party[|selected_character].name);
draw_text(x+120, y + 35 +(i*100), "LV " + string(global.party[|selected_character].lvl));

//TO DO: THESE BARS NEED TO BE SET TO SCALE RELATIVE TO THE AMOUNT OF HP/MP LEFT
//HP Bar

draw_text(x+120, y + 50 +(i*100), "HP " + string(global.party[|i].hp) + "/" + string(global.party[|selected_character].hp_max));
draw_rectangle_color(x+121, y + 64 +(i*100),x+221, y + 64 +(i*100),c_red,c_maroon,c_maroon,c_red,false)
draw_rectangle_color(x+121, y + 64 +(i*100),x+200, y + 64 +(i*100),c_lime,c_lime,c_lime,c_lime,false)
//MP Bar
draw_text(x+120, y + 65 +(i*100), "MP " + string(global.party[|i].mp) + "/" + string(global.party[|selected_character].mp_max));
draw_rectangle_color(x+121, y + 80 +(i*100),x+221, y + 80 +(i*100),c_red,c_maroon,c_maroon,c_red,false)
draw_rectangle_color(x+121, y + 80 +(i*100),x+200, y + 80 +(i*100),c_blue,c_aqua,c_aqua,c_blue,false)
//XP Bar
draw_text(x+120, y + 80 +(i*100), "XP " + string(global.party[|i].xp) + "/" + string(global.party[|selected_character].xp_max));

//Stats
draw_text(x+120, y + 20 + 80 +(i*100), "STR: " )
draw_text(x+120, y + 20 + 95 +(i*100), "DEF: " )
draw_text(x+120, y + 20 + 110 +(i*100), "AGI: ")
draw_text(x+120, y + 20 + 125 +(i*100), "VIT: ")
draw_text(x+120, y + 20 + 140 +(i*100), "WIL: ")
draw_text(x+120, y + 20 + 155 +(i*100), "LCK: ")

draw_set_halign(fa_right)
draw_text(x+360, y + 20 + 80 , string(global.party[|i].STR));
draw_text(x+360, y + 20 + 95 , string(global.party[|i].DEF));
draw_text(x+360, y + 20 + 110,  string(global.party[|i].AGI));
draw_text(x+360, y + 20 + 125,  string(global.party[|i].VIT));
draw_text(x+360, y + 20 + 140,  string(global.party[|i].WIL));
draw_text(x+360, y + 20 + 155,  string(global.party[|i].LCK));
draw_set_halign(fa_left)

//Equippment
draw_text(x+120, y + 20 + 185 +(i*100), "Weapon: "  )
draw_text(x+120, y + 20 + 200 +(i*100), "Helm: "    )
draw_text(x+120, y + 20 + 215 +(i*100), "Armor: "   )
draw_text(x+120, y + 20 + 230 +(i*100), "Accessory:")

draw_set_halign(fa_right)
draw_text(x+360, y + 20 + 185 +(i*100), string(global.party[|i].weapon_slot.name));
draw_text(x+360, y + 20 + 200 +(i*100), string(global.party[|i].helm_slot.name));
draw_text(x+360, y + 20 + 215 +(i*100),  string(global.party[|i].armor_slot.name));
draw_text(x+360, y + 20 + 230 +(i*100), string(global.party[|i].accessory_slot.name));
draw_set_halign(fa_left)

//Armor Rating needed?
draw_text(x+120, y + 20 + 260 +(i*100), "Armor Rating: " + string(global.party[|i].ARMOR_RATING));

//Spells

draw_text(x+120, y + 20 + 275 +(i*100), "Known Spells: " + known_spells);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
