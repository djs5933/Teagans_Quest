<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variable initialization

/*
this object is a parent to all of the party members that will be available
in the step function of this object will be variable if-statement blocks that
are meant to be used in conjunction with a timeline in order to check for button presses 
over a certain amount of time
there will be variables initialized here in order to control those blocks
*/

charge_counter = 0;

chargeBonusDamage = 0;

shouldTimedHitCheck = false;

shouldChargeStartCheck = false;

shouldChargeCheck = false;

chargeUP = true;

whiffed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for Whiff
if instance_exists(obj_timed_indicator) &amp;&amp; obj_timed_indicator.image_index &lt; 17 &amp;&amp; keyboard_check_pressed(vk_space){
whiffed = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///charging over a time period
if(shouldChargeCheck)
{
    if(keyboard_check(vk_space))
    {

        timeline_position = 60;
    }

    if keyboard_check_released(vk_space)
    {
        timeline_position = 120
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///window to check for a charge input
if(shouldChargeStartCheck)
{
    timed_hit_check = false;


    if(!timed_hit_check &amp;&amp; !whiffed)
    {
    
        if(keyboard_check_pressed(vk_space) &amp;&amp; instance_exists(global.targeted_enemy))
        {
            if (instance_exists(obj_timed_indicator))
            {
                with(timed_indicator)
                {
                    instance_destroy();
                }
            }
            timeline_index = tl_attack_party_charge_B;
            timeline_position = 0;
            timeline_running = true;
            timeline_loop = false;
            timed_hit_check = true;
            shouldChargeStartCheck = false;
        }

    }
    else
    {
            if(keyboard_check_pressed(vk_space) &amp;&amp; instance_exists(global.targeted_enemy))
        {
            if (instance_exists(obj_timed_indicator))
            {
                with(timed_indicator)
                {
                    instance_destroy();
                }
            }
            timeline_index = tl_attack_party_charge_B;
            timeline_position = 120;
            charge_counter = 0
            timeline_running = true;
            timeline_loop = false;
            timed_hit_check = true;
            shouldChargeStartCheck = false;
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///window to check for timed hit input
if(shouldTimedHitCheck)
{
    timed_hit_check = false;

    /*
    if(!instance_exists(obj_timed_indicator))
    {
        timed_indicator = instance_create(x, y + 60, obj_timed_indicator);
    }
    */
    if(!timed_hit_check &amp;&amp; !whiffed)
    {
    
        if(keyboard_check_pressed(vk_space) &amp;&amp; instance_exists(global.targeted_enemy))
        {
            if (instance_exists(obj_timed_indicator))
            {
                with(timed_indicator)
                {
                    instance_destroy();
                }
            }
            timeline_index = tl_attack_party_B;
            timeline_position = 0;
            timeline_running = true;
            timeline_loop = false;
            timed_hit_check = true;
            shouldTimedHitCheck = false;
        }
    }
    else
    {
                if (instance_exists(obj_timed_indicator))
            {
                with(timed_indicator)
                {
                    instance_destroy();
                }
            }
            timeline_position = 62;
            timeline_running = true;
            timeline_loop = false;
            timed_hit_check = true;
            shouldTimedHitCheck = false;
    }
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
