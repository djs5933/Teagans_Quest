<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame_size = 4;                     //this frame size is arbitrary, it's just what fits for now

///setting up variables and list of items

menu_items = ds_list_create();                  //list of items the menu contains

//menu_name = irandom(100);                    //name of the menu

ds_list_add(global.menu_path, menu_name);       //add this current menu to the nested menus list



depth = -1000 * ds_list_size(global.menu_path);             //depth correction (may need to be change)

active_Items = ds_list_create();
selectionCounter = 0;

real_count = 0;
isComplete = false;
last_frame = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete the window and all buttons

audio_sound_gain(snd_brrt,0.25,0);
audio_play_sound(snd_brrt,1,0)

for(i = 0; i &lt; ds_list_size(active_Items); i++)
{
    with(ds_list_find_value(active_Items, i))
    {
        instance_destroy();
    }
}

with(backdrop)
{
    instance_destroy();
}

ds_list_delete(global.menu_path, ds_list_size(global.menu_path) -1);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete the menu and deallocate the list

ds_list_delete(global.menu_path,ds_list_size(global.menu_path)-1)

for(i = 0; i&lt; ds_list_size(active_Items); i++)
{
    with(ds_list_find_value(active_Items, i))
    {
        instance_destroy();
    }
}
ds_list_clear(active_Items);


//Removes obj_window_base
with (backdrop)
{
instance_destroy();
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button Handling


if (ds_list_find_value(global.menu_path, ds_list_size(global.menu_path)-1) == menu_name)
{


    if keyboard_check_pressed(vk_space)
    {
        temp = ds_list_find_value(active_Items, selectionCounter % ds_list_size(active_Items));
    
        temp.alarm[0] = 1;
        
        
    }

    
    //NOTE: possible issue
    //this abstract menu is meant to be able to be closed
    //however, the main battle menu does not function like this
    //might pose problems later
    
    
    if keyboard_check_pressed(vk_shift)                 
    {
        alarm[1] = 1
        
    }


    if(keyboard_check_pressed(vk_down) || keyboard_check_pressed(vk_up))
    {
    
        //first, clear all the active items to make room for shift
        audio_sound_gain(snd_boop,0.25,0)
        audio_play_sound(snd_boop,1,0)
        
        
        if (keyboard_check_pressed(vk_down))
        {
            selectionCounter++;
            real_count++;
            if (selectionCounter == frame_size  &amp;&amp; real_count &gt;= ds_list_size(menu_items))
            {
                selectionCounter = 0;
                real_count = 0;
                if( !isComplete || !ds_list_empty(active_Items))
                {
                    var temp_size = ds_list_size(active_Items);
                    for(i = 0; i &lt; temp_size; i++)
                    {
                        var temp_item = ds_list_find_value(active_Items, 0);
        
                        with(temp_item)
                        {
                            instance_destroy();
                        }
                        ds_list_delete(active_Items, 0);
                    }
                }
                //now add to active items depending on what selection counter currently is
        
                if(selectionCounter + frame_size &lt; ds_list_size(menu_items))
                {
                    for(i = 0; i &lt; frame_size; i++)
                    {
                        var temp_selection = selectionCounter + i;
                        ds_list_add(active_Items,instance_create(x+25, y+ 20 + 40* i, ds_list_find_value(menu_items, temp_selection)));
                    }
                    last_frame = false;
                    
                }
                else
                {
                    i = 0;
                    for(j = ds_list_size(menu_items) -4; j &lt; ds_list_size(menu_items); j++)
                    {
                
                        ds_list_add(active_Items,instance_create(x+25, y+ 20 + 40* i, ds_list_find_value(menu_items, j)));
                        i++;
                    }
                    last_frame = true;
                }
            }
            else if(selectionCounter == frame_size )
            {
                
                if( !isComplete || !ds_list_empty(active_Items))
                {
                    var temp_size = ds_list_size(active_Items);
                    for(i = 0; i &lt; temp_size; i++)
                    {
                        var temp_item = ds_list_find_value(active_Items, 0);
        
                        with(temp_item)
                        {
                            instance_destroy();
                        }
                        ds_list_delete(active_Items, 0);
                    }
                }
                //now add to active items depending on what selection counter currently is
        
                if(selectionCounter + frame_size &lt; ds_list_size(menu_items))
                {
                    for(i = 0; i &lt; frame_size; i++)
                    {
                        var temp_selection = selectionCounter + i;
                        ds_list_add(active_Items,instance_create(x+25, y+ 20 + 40* i, ds_list_find_value(menu_items, temp_selection)));
                    }
                    last_frame = false;
                    
                }
                else
                {
                    i = 0;
                    for(j = ds_list_size(menu_items) -4; j &lt; ds_list_size(menu_items); j++)
                    {
                
                        ds_list_add(active_Items,instance_create(x+25, y+ 20 + 40* i, ds_list_find_value(menu_items, j)));
                        i++;
                    }
                    last_frame = true;
                }
                
                selectionCounter = frame_size -1;
            }
            show_debug_message("Selection counter is currently: " + string(selectionCounter));
        }

        if(keyboard_check_pressed(vk_up))
        {
            selectionCounter--;
            real_count--;
            if (selectionCounter == -1 &amp;&amp; real_count == -1)
            {
                selectionCounter = frame_size -1;
                real_count = ds_list_size(menu_items) -1;
                
                if( !isComplete || !ds_list_empty(active_Items))
                {
                    var temp_size = ds_list_size(active_Items);
                    for(i = 0; i &lt; temp_size; i++)
                    {
                        var temp_item = ds_list_find_value(active_Items, 0);
        
                        with(temp_item)
                        {
                            instance_destroy();
                        }
                        ds_list_delete(active_Items, 0);
                    }
                }
                
                i = 0;
                    for(j = ds_list_size(menu_items) -4; j &lt; ds_list_size(menu_items); j++)
                    {
                
                        ds_list_add(active_Items,instance_create(x+25, y+ 20 + 40* i, ds_list_find_value(menu_items, j)));
                        i++;
                    }
                
                
                
                
             }  
            else if (selectionCounter == -1)
            {
                selectionCounter = 0;
                real_count = 0;
                if( !isComplete || !ds_list_empty(active_Items))
                {
                    var temp_size = ds_list_size(active_Items);
                    for(i = 0; i &lt; temp_size; i++)
                    {
                        var temp_item = ds_list_find_value(active_Items, 0);
        
                        with(temp_item)
                        {
                            instance_destroy();
                        }
                        ds_list_delete(active_Items, 0);
                    }
                }
                //now add to active items depending on what selection counter currently is
        
                if(selectionCounter + frame_size &lt; ds_list_size(menu_items))
                {
                    for(i = 0; i &lt; frame_size; i++)
                    {
                        var temp_selection = selectionCounter + i;
                        ds_list_add(active_Items,instance_create(x+25, y+ 20 + 40* i, ds_list_find_value(menu_items, temp_selection)));
                    }
                    last_frame = false;
                }
                else
                {
                    i = 0;
                    for(j = ds_list_size(menu_items) -4; j &lt; ds_list_size(menu_items); j++)
                    {
                
                        ds_list_add(active_Items,instance_create(x+25, y+ 20 + 40* i, ds_list_find_value(menu_items, j)));
                        i++;
                    }
                    last_frame = true;
                }
                
            }
         
           
            show_debug_message("Selection counter is currently: " + string(selectionCounter));
        
        }
        
      
        
    }
    
    for(i = 0; i&lt; ds_list_size(active_Items); i++)
    {
        if(i == selectionCounter)
        {
            with(ds_list_find_value(active_Items, i))
            {
                isSelected = true;
            }
        }
        else
        {
            with(ds_list_find_value(active_Items,i))
            {
                isSelected = false;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the window background


/*
if( !isComplete || !ds_list_empty(active_Items))
{
    for(i = 0; i &lt; ds_list_size(active_Items); i++)
    {
        var temp_item = ds_list_find_value(active_Items, i);
        
        with(temp_item)
        {
            instance_destroy();
        }
        ds_list_delete(active_Items, i);
    }
}

*/
if(!isComplete)
{
    
    
    
    backdrop = instance_create(x,y, obj_window_base);

    backdrop.depth = self.depth;            //depth correction
    backdrop.image_xscale = 150 / 64;       //64 since the window base object is 64 pixels wide
    backdrop.image_yscale = 200 /64;        //see above

    for(i = 0; i &lt; ds_list_size(menu_items); i++)
    {
        ds_list_add(active_Items,instance_create(x+25, y+ 20 + 40* i, ds_list_find_value(menu_items, i)));
    }
    isComplete = true;
}

if(selectionCounter - real_count &lt; 0)
{
    draw_sprite(spr_menu_list_arrow_up,0, x+150, y+20);
}

if( !last_frame)
{
    
    draw_sprite(spr_menu_list_arrow_down, 0, x+150, y +20 + 40 * (frame_size));
}

/*
if((selectionCounter % ds_list_size(menu_items) + 4) &lt;= (ds_list_size(menu_items)))
{
    for(i = 0; i &lt; 4; i++)
    {
        
        
        var temp_selection = (selectionCounter % ds_list_size(menu_items)) + i;
        
        
    }
}

else
{
    for(i = 0; i&lt;4; i++)
    {
        var temp_selection = (selectionCounter % ds_list_size(menu_items)) + i;
        ds_list_add(active_Items,instance_create(x+25, y+ 40 + 40* i, ds_list_find_value(menu_items, i)));
    }
}
*/

/*
for(i = 0; i&lt; ds_list_size(active_Items); i++)
{
    if(i == selectionCounter)
    {
        with(ds_list_find_value(active_Items, i))
        {
            isSelected = true;
        }
    }
    else
    {
        with(ds_list_find_value(active_Items,i))
        {
            isSelected = false;
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
