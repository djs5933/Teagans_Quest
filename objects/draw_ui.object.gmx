<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up variables for HUD
global.button=0;
global.enemy_n=0;
global.player_time=0; // Player isn't ready to attack by default



attack_nxt=0;
to_attack=0;
val=0;





init = true;

/*
global.button value meanings
0=Attack
1=Magic
2=Run
*/

/*
0=Fire
*/

/*

This object draws the UI and controls it
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This should all be automated if you change screen sizes
draw_set_color(c_white);
draw_set_font(fnt_ff);

ui_start = (room_height/100)*global.main_ui_range
stats_start = (room_height/100)*(100-global.main_ui_range)

stat_range_x=(room_width/100)

for (i = 0; i&lt; ds_list_size(global.party); i++)
{
     var temp_player = ds_list_find_value(global.party, i);
     
     //var temp_player = instance_create(2000, 2000, temp_t);
    // STRINGS
    char_name = temp_player.name;
    hp = string(temp_player.hp);
    mp = string(temp_player.mp);
    constant_var = 17;
    
    

    //draw_rectangle_color(0,room_height+ui_start,room_width,(room_height/100)*(100-global.main_ui_range),c_blue,c_blue,c_blue,c_blue,false);
    if (init == true)
    {
        ui_rectangle = instance_create(0,room_height-ui_start, obj_window_base );
    
        ui_rectangle.depth = 100000;

        ui_rectangle.image_xscale = (room_width)/ 64;
        ui_rectangle.image_yscale = (room_height - (room_height-ui_start)) / 64;
        init = false;
    }

    draw_text(stat_range_x*3,stats_start+(8*2),"NAME");
    draw_text(stat_range_x*50,stats_start+(8*2),"HP");
    draw_text(stat_range_x*60,stats_start+(8*2),"MP");

    draw_text(string_length(hp)/2+stat_range_x*50,stats_start+(constant_var*2) + 20*i,hp);
    draw_text((string_length(mp)/2)+stat_range_x*60,stats_start+(constant_var*2)+ 20*i,mp);

    draw_text((string_length(char_name)/2)+stat_range_x*3,stats_start+(constant_var*2)+ 20*i,char_name);
}
// DRAW MENU_N=0
/*
static_xy=50
box_x=40+static_xy
box_y=200+static_xy
box_xx=200+static_xy
box_yy=100+static_xy

draw_rectangle_color(box_x+static_xy,room_height-box_y+static_xy,box_xx+static_xy,room_height-box_yy+static_xy,c_black,c_black,c_black,c_black,false);

if(global.menu_n=0){
if(global.button=0){menu_string_0[0]= "Attack &lt;-";}else{menu_string_0[0]= "Attack";}
if(global.button=1){menu_string_0[1]= "Magic &lt;-";}else{menu_string_0[1]= "Magic";}
if(global.button=2){menu_string_0[2]= "Run &lt;-";}else{menu_string_0[2]= "Run";}
}else if(global.menu_n=1){
if(global.button=0){menu_string_0[0]= "Fire I &lt;-";}else{menu_string_0[0]= "Fire I";}
if(global.button=1){menu_string_0[1]= "Empty &lt;-";}else{menu_string_0[1]= "Empty";}
if(global.button=2){menu_string_0[2]= "Empty &lt;-";}else{menu_string_0[2]= "Empty";}
}else if(global.menu_n=2){
for(i=0;i&lt;global.enemy_n;i+=1){
if(global.button=i){menu_string_0[i]= " &lt;-";}else{menu_string_0[i]= " ";}

draw_set_color(c_black);
draw_text(global.enemy[i].x+(string_length(menu_string_0[i])+128),global.enemy[i].y,menu_string_0[i]);
draw_set_color(c_white);
}
}

constant_text_x=50;
constant_text_y=35;

if(global.menu_n!=2){
draw_text(box_x+(constant_text_x+(string_length(menu_string_0[0]))),box_y+(constant_text_y),menu_string_0[0]);
draw_text(box_x+(constant_text_x+(string_length(menu_string_0[1]))),box_y+(constant_text_y*2),menu_string_0[1]);
draw_text(box_x+(constant_text_x+(string_length(menu_string_0[2]))),box_y+(constant_text_y*3),menu_string_0[2]);
}
*/
// DRAW PLAYER


//if(global.player_time=global.player_ttattack){temp_spr.image_index=1}else{temp_spr.image_index=0}

// DRAW TIME

//val=(28 mod global.player_ttattack) / (global.player_time+1)

//draw_rectangle(stat_range_x*70,stats_start+(18*2),stat_range_x*(70+(global.player_time)),stats_start+(23*2),false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
