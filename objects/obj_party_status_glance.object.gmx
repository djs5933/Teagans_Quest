<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set up variables for drawing
party_member = obj_temp_Teagan;           //initial value, should be set by party_display
                                //this should be the object name of the party member
var isSelected = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw things related to determined charactered

if(party_member!= 0)
{
    if(file_exists("autosav" + party_member.name + ".sav"))
    {

    }
    else
    {
        //draw portrait
        draw_sprite(party_member.current_portrait, 1, x+20, y+ 15);
        draw_set_color(c_white);
    
        //Name and Level
        draw_text(x+120, y+ 20, party_member.name);
        draw_text(x+120, y+ 20, string(party_member.lvl));
    
        //TO DO: THESE BARS NEED TO BE SET TO SCALE RELATIVE TO THE AMOUNT OF HP/MP LEFT
        //HP Bar
        draw_text(x+120, y + 50, "HP " + string(party_member.hp) + "/" + string(party_member.hp_max));
        draw_rectangle_color(x+121, y + 64,x+221, y + 64,c_red,c_maroon,c_maroon,c_red,false)
        draw_rectangle_color(x+121, y + 64,x+200, y + 64,c_lime,c_lime,c_lime,c_lime,false)
        //MP Bar
        draw_text(x+120, y + 65, "MP " + string(party_member.mp) + "/" + string(party_member.mp_max));
        draw_rectangle_color(x+121, y + 80,x+221, y + 80,c_red,c_maroon,c_maroon,c_red,false)
        draw_rectangle_color(x+121, y + 80,x+200, y + 80,c_blue,c_aqua,c_aqua,c_blue,false)
        //XP Bar
        draw_text(x+120, y + 80, "XP " + string(party_member.xp) + "/" + string(party_member.xp_max));
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw things related to determined charactered

if(party_member!= 0)
{
    if(file_exists("autosav" + party_member.name + ".sav"))
    {

    }
    else
    {
        //draw portrait
        draw_sprite(party_member.current_portrait, 1, x+20, y+ 15);
        draw_set_color(c_white);
    
        //Name and Level
        draw_text(x+120, y+ 20, party_member.name);
        draw_text(x+120, y+ 20, string(party_member.lvl));
    
        //TO DO: THESE BARS NEED TO BE SET TO SCALE RELATIVE TO THE AMOUNT OF HP/MP LEFT
        //HP Bar
        draw_text(x+120, y + 50, "HP " + string(party_member.hp) + "/" + string(party_member.hp_max));
        draw_rectangle_color(x+121, y + 64,x+221, y + 64,c_red,c_maroon,c_maroon,c_red,false)
        draw_rectangle_color(x+121, y + 64,x+200, y + 64,c_lime,c_lime,c_lime,c_lime,false)
        //MP Bar
        draw_text(x+120, y + 65, "MP " + string(party_member.mp) + "/" + string(party_member.mp_max));
        draw_rectangle_color(x+121, y + 80,x+221, y + 80,c_red,c_maroon,c_maroon,c_red,false)
        draw_rectangle_color(x+121, y + 80,x+200, y + 80,c_blue,c_aqua,c_aqua,c_blue,false)
        //XP Bar
        draw_text(x+120, y + 80, "XP " + string(party_member.xp) + "/" + string(party_member.xp_max));
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
